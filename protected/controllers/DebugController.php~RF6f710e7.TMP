<?php
Yii::import('application.models.AR.*');
Yii::import('application.models.*');

class DebugController extends BmsBaseController
{
	public function actionIndex () {
		$this->render('test');
	}

    public function actionTest () {
        $vin = $this->validateStringVal('vin', '');
        $material = $this->validateStringVal('material', '');
        // $transaction = Yii::app()->db->beginTransaction();
        try {
            $client =new SoapClient('http://192.168.1.38/bms/webService/carInfo/quote');
            $ret = $client->getCarInfo('LGXC14AA2D1002456');
            $this->renderJsonBms(true, 'OK', $ret);
        } catch(Exception $e) {
            // $this->transaction->rollback();
            $this->renderJsonBms(false, $e->getMessage(), null);
        }
    }

    public function actionTestStockDaily () {
        try {
            $ret = $this->getStockDaily();
            $this->renderJsonBms(true, 'OK', $ret);
        } catch(Exception $e) {
            // $this->transaction->rollback();
            $this->renderJsonBms(false, $e->getMessage(), null);
        }
    }

    public function actionTestCRM () {
        $orderNumber = $this->validateStringVal('orderNumber', '');
        try {
            $test = new Test();
            $ret['xf'] = $test->getOriginalOrders($orderNumber, "XF");
            $ret['crm'] = $test->getOriginalOrders($orderNumber, "CRM");
            $this->renderJsonBms(true, 'Ok', $ret);
        } catch(Exception $e) {
            $this->renderJsonBms(true, $e->getMessage(), null);
        }
    }

    public function parseDate ($sDate, $eDate) {
        $stime = $sDate . ' 08:00:00';
        $etime = date("Y-m-d H:i:s", strtotime('+1 day', strtotime($eDate . ' 08:00:00')));

        $s = strtotime($stime);
        $e = strtotime($etime);

        $months = (date("Y", $e)-date("Y", $s))*12+(date("m", $e)-date("m",$s));
        $timespan = $months>=2 ? "yearly" : "monthly";
        $ret = array();
        switch($timespan) {
            case "monthly":
                $pointFormat = 'm-d';
                $format = 'Y-m-d H:i:s';
                $slice = 86400;
                break;
            case "yearly":
                $pointFormat = 'y-m';
                $format = 'Y-m-d H:i:s';
                break;
        }

        $t = $s;
        while($t<$e) {
            $point = date($pointFormat, $t);
            if($pointFormat === 'y-m') {
                $eNextM = strtotime('first day of next month', $t); //next month
                $ee = date('Y-m-d', $eNextM) . " 08:00:00"; //next month firstday
                $etmp = strtotime($ee); //next month firstday
            } else {
                $etmp = $t+$slice;
            }
            if($etmp>=$e){
                $etmp=$e;
            }

            $ret[] = array(
                'stime' => date($format, $t),
                'etime' => date($format, $etmp),
                'point' => $point,
            );
            $t = $etmp;
        }

        return $ret;
    }

    public function parseQueryTime ($stime, $etime, $timespan) {
        $s = strtotime($stime);
        $e = strtotime($etime);

        $ret = array();

        switch($timespan) {
            case "monthly":
                $pointFormat = 'd';
                $format = 'Y-m-d H:i:s';
                $slice = 86400;
                break;
            case "yearly":
                $pointFormat = 'm';
                $format = 'Y-m-d H:i:s';
                break;
            default:
                $pointFormat = 'd';
                $format = 'Y-m-d H:i:s';
                $slice = 86400;
        }

        $t = $s;
        while($t<$e) {
            $point = date($pointFormat, $t);
            if($pointFormat === 'm') {
                $eNextM = strtotime('first day of next month', $t); //next month
                $ee = date('Y-m-d', $eNextM) . " 08:00:00"; //next month firstday
                $etmp = strtotime($ee); //next month firstday
            } else {
                $etmp = $t+$slice;
            }
            if($etmp>=$e){
                $etmp=$e;
            }

            $ret[] = array(
                'stime' => date($format, $t),
                'etime' => date($format, $etmp),
                'point' => $point,
            );
            $t = $etmp;
        }

        return $ret;
    }

    public function getStockDaily () {
        $seriesNameList = Series::getNameList();
        $seriesCodeList = Series::getCodeList();
        $seriesCondition = "('" . join("','", $seriesNameList) . "')";
        $sql = "SELECT
            COUNT(*) AS count,
            xswl AS distribution_network,
            jxsmc AS distributor_name,
            cxmc AS series_name,
            VINxtcx AS car_type,
            clys AS sell_color
            FROM AMS_STOCKVIEW
            WHERE cxmc IN $seriesCondition
            GROUP BY xswl,jxsmc,cxmc,VINxtcx,clys";
        $datas = $this->sellMSSQL($sql);
        foreach($datas as &$data){
            $ar = new SellStockDailyAR();
            $ar->create_time = date("YmdHis");
            foreach($data as $key => $value) {
                if($key == "series_name") {
                    $ar->series = $seriesCodeList[$value];
                } else {
                    $ar->$key = $value;
                }
            }
            $ar->save();
        }
        return $datas;
    }

    public function sellMSSQL($sql){
        //php 5.4 linux use pdo cannot connet to ms sqlsrv db
        //use mssql_XXX instead

        $tdsSever = Yii::app()->params['tds_SELL'];
        $tdsDB = Yii::app()->params['tds_dbname_BYDDATABASE'];
        $tdsUser = Yii::app()->params['tds_SELL_username'];
        $tdsPwd = Yii::app()->params['tds_SELL_password'];

        $mssql=mssql_connect($tdsSever, $tdsUser, $tdsPwd);
        if(empty($mssql)) {
            throw new Exception("cannot connet to sqlserver $tdsSever, $tdsUser ");
        }
        mssql_select_db($tdsDB ,$mssql);

        //query
        $result = mssql_query($sql);
        $datas = array();
        while($ret = mssql_fetch_assoc($result)){
            $datas[] = $ret;
        }
        //disconnect
        mssql_close($mssql);

        //convert to UTF-8
        foreach($datas as &$data){
            foreach($data as $key => $value){
                $data[$key] = iconv('GBK','UTF-8', $value);
            }
        }

        return $datas;
    }
}